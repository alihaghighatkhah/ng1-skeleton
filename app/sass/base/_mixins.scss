//===============================================
// size
//===============================================
@mixin size($height, $width)
{
  width: $width;
  height: $height;
}
@mixin square($size)
{
  @include size($size, $size);
}


//===============================================
// user select
//===============================================
@mixin user-select($user-select)
{
  -webkit-user-select: $user-select;
  -moz-user-select: $user-select;
  -ms-user-select: $user-select;
  -o-user-select: $user-select;
  user-select: $user-select; 
}

//===============================================
// selection color
//===============================================
@mixin selection-color ($background, $color)
{
  ::selection {
    background: $background;
    color: $color;
  }
  ::-moz-selection {
    background: $background;
    color: $color;
  }
}

//===============================================
// CSS3 properties
//===============================================
@mixin transform ($transform) {
  -webkit-transform: $transform;
  -moz-transform: $transform;
  -o-transform: $transform;
  transform: $transform;
}

@mixin transform-origin ($x, $y) {
  -webkit-transform-origin: $x $y;
  -moz-transform-origin: $x $y;
  -o-transform-origin: $x $y;
  transform-origin: $x $y;
}

@mixin transition ($transform) {
  -webkit-transition: $transform;
  -moz-transition: $transform;
  -o-transition: $transform;
  transition: $transform;
}

@mixin transform-style ($style) {
  -webkit-transform-style: $style;
  -moz-transform-style: $style;
  -o-transform-style: $style;
  -ms-transform-style: $style;
  transform-style: $style;
}

@mixin animation ($animation) {
  -webkit-animation: $animation;
  -moz-animation: $animation;
  -o-animation: $animation;
  animation: $animation;
}

//===============================================
// Other
//===============================================
@mixin sprite ($x, $y) {
  background-image: url('../images/sprite.png');
  background-repeat: no-repeat;
  background-position: $x $y;
  background-size: 62pxâ€†269px;
}

/**
 * @name gradient
 * @param $direction {string | number} this parameter can be string as horizontal, vertical and radial
 *    or it can be a degree value like 45deg which is relative to top vertical axis CW
 * @param colors {list} is a list of at least 2 colors each of which contains a color code and a position in percents space separated
 *
 * @summery generates css gradient
 * Example:
 *
 *  @include gradient( 'vertical', #fff 0%, #000 100% );
 *  @include gradient( 'horizontal', #fff 0%, #000 100% );
 *  @include gradient( 'radial', #fff 0%, #000 50%, #555 100% );
 *  @include gradient( 45deg, #fff 0%, #000 100% );
 *
 *
 **/
@mixin gradient ($direction, $colors...) {

  $typeValue: '';
  $typeValueW3C: '';


  @if $direction == 'radial'{
    $typeValue: center, ellipse cover;
    $typeValueW3C: ellipse at center;
  }

  @if $direction == 'vertical'{
    $typeValue: top;
    $typeValueW3C: to bottom;
  }

  @if $direction == 'horizontal'{
    $typeValue: left;
    $typeValueW3C: to right;
  }

  @if(type-of($direction) != string) {

    $typeValue: $direction;
    $typeValueW3C: $direction;
    @if $direction < 0 {
      $typeValueW3C: $direction + 180deg;
    }

  }


  background: -moz-linear-gradient($typeValue,  $colors); /* FF3.6-15 */
  background: -webkit-linear-gradient($typeValue,  $colors); /* Chrome10-25,Safari5.1-6 */
  background: linear-gradient($typeValueW3C,  $colors); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */


}


@mixin middle-aligner () {
  content: '';
  display: inline-block;
  vertical-align: middle;
  width: 0;
  height: 100%;
}